name: comment

on:
  issue_comment:
    types:
      - created

jobs:
  pr_commented:
    # This job only runs for pull request comments
    name: PR comment
    # Run the action only for '/rerun' pull request comment by owner, member, or collaborator of the repo/organization
    if: |
      github.event.issue.pull_request
      && github.event.comment.body == '/rerun'
      && contains(fromJson('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
    runs-on: ubuntu-20.04
    steps:
      - name: dump event details
        id: dump_evemt
        run: |
          jq < $GITHUB_EVENT_PATH

      - name: comment on commented PR
        id: coment_pr
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Comment on PR #${{ github.event.issue.number }}'
            })

      - name: get pull request number
        id: pr_nr
        run: |
          echo "${{ github.event.comment.issue_url }}"
          PR_URL="${{ github.event.comment.issue_url }}"
          PR_NR="${PR_URL##*/}"
          echo "${PR_NR}"
          echo "::set-output name=pr_nr::${PR_NR}"

      - name: checkout
        id: checkout
        # TODO: the correct way to checkout would be to use simmilar approach as in get_commit_by_timestamp function of
        # the github gluetool module
        uses: actions/checkout@v2
        with:
          ref: "refs/pull/${{ steps.pr_nr.outputs.pr_nr }}/head"

      - name: get ref and sha
        id: ref_sha
        run: |
          echo "::set-output name=sha::git rev-parse --short HEAD"
          echo "::set-output name=ref::refs/pull/${{ steps.pr_nr.outputs.pr_nr }}/head"

      - name: trigger copr build
        id: copr_build
        run: |
          cat << EOF > copr_fedora.conf
          [copr-cli]
          login = ${{ secrets.COPR_LOGIN }}
          username = vojtechsokol
          token = ${{ secrets.COPR_TOKEN }}
          copr_url = https://copr.fedorainfracloud.org
          # expiration date: 2021-11-06
          EOF

          # TODO: dafuq!? without this the copr_build target fails in make srpm...
          # mkdir -p packaging/{sources,SRPMS}/
          # git archive --prefix leapp-0.12.1/ -o "packaging/sources/leapp-0.12.1.tar.gz" HEAD
          echo "listing contents of packaging/ folder BEFORE make srpm"
          find packaging/

          echo "running make srpm..."
          PR=${{ steps.pr_nr.outputs.pr_nr }} COPR_CONFIG=copr_fedora.conf make srpm
          echo "DONE"

          echo "listing contents of packaging/ folder AFTER make srpm"
          find packaging/

          pip install copr-cli
          # PR=${{ steps.pr_nr.outputs.pr_nr }} COPR_CONFIG=copr_fedora.conf make srpm | tee copr.log
          # PR=${{ steps.pr_nr.outputs.pr_nr }} COPR_CONFIG=copr_fedora.conf make srpm
          PR=${{ steps.pr_nr.outputs.pr_nr }} COPR_CONFIG=copr_fedora.conf make copr_build | tee copr.log

          COPR_URL=$(grep -Po 'https://copr.fedorainfracloud.org/coprs/build/\d+' copr.log)
          echo "::set-output name=copr_url::${COPR_URL}"

      - name: copr comment
        id: link_copr
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Copr build: ${{ steps.copr_build.outputs.copr_url }}'
            })

      # This step schedules a tmt test. The test id is stored in `req_id` variable for a later use.
      # TODO: The actual command that triggers a new test on TF service is commented out as it would fail, because
      # there are no tmt plans ready in the repository.
      - name: schedule a tmt test
        id: sched_test
        # Information about the repo/ref/sha from which the action was triggered is sent in the
        # `environments.variables` field.

        # All the discovered test plans from the repository specified in `tests.fmf.url` are run.
        # It should be possible to specify which test plan to run as specified in `test.fmf.name`, however this is not
        # working at this moment, see https://gitlab.com/testing-farm/general/-/issues/18
        #
        # At this moment repo/sha that triggered the action is used, i.e. all tests plans specified in THIS repository
        # are run.

        # TODO: The tests are run in `Fedora-33` compose, it should be possible to use `Fedora` symbolic name that
        # should be translated to the latest stable Fedora but the job ends in 'error' state:
        # "Guest couldn't be provisioned: Artemis resource ended in 'error' state"
        run: |
          #jq < $GITHUB_EVENT_PATH

          cat << EOF > request.json
          {
            "api_key": "${{ secrets.TF_API_KEY }}",
            "test": {"fmf": {"url": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY", "ref": "${{ steps.ref_sha.outputs.sha }}"}},
            "environments": [{
              "arch": "x86_64",
              "os": {"compose": "Fedora-33"},
              "variables": {
                "REPO": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY",
                "REF": "${{ steps.ref_sha.outputs.ref }}",
                "SHA": "${{ steps.ref_sha.outputs.sha }}"
              }
            }]
          }
          EOF

          #curl ${{ secrets.TF_ENDPOINT }}/requests \
          #  --data @request.json \
          #  --header "Content-Type: application/json" \
          #  --output response.json
          echo '{"id": "fake-id"}' > response.json

          echo "::set-output name=req_id::$(jq -r .id response.json)"

      # This step adds a new comment to the pull request with a link to the test.
      # TODO: This is a temporary workaround until a proper way to set a commit status is implemented.
      - name: comment
        id: comment
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Testing Farm [request](${{ secrets.TF_ENDPOINT }}/requests/${{ steps.sched_test.outputs.req_id }})' +
                    ' for tmt test was created.'
            })
